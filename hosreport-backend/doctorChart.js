// doctorChart.js
const express = require('express')
const db = require('./db')

const router = express.Router()

// üî• GET /api/doctor-chart/ipd-doctors - ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ IPD ‡∏£‡∏≤‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå
router.get('/ipd-doctors', (req, res) => {
  try {
    // SQL Query ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
    const query = `
      SELECT 
        a.dx_doctor, 
        d.name AS doctor, 
        COUNT(*) AS totalVisit
      FROM an_stat a
      LEFT JOIN doctor d ON a.dx_doctor = d.code
      WHERE a.regdate BETWEEN '2024-10-01' AND '2025-09-30'
      GROUP BY a.dx_doctor
      ORDER BY totalVisit DESC
    `

    db.query(query, (err, results) => {
      if (err) {
        console.error('IPD Doctors Database error:', err)
        return res.status(500).json({
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        })
      }

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chart
      const labels = []           // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå
      const visitCounts = []      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Admit
      const doctorDetails = []    // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏û‡∏ó‡∏¢‡πå

      results.forEach(row => {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™)
        const doctorName = row.doctor || `‡∏£‡∏´‡∏±‡∏™: ${row.dx_doctor}`
        
        labels.push(doctorName)
        visitCounts.push(parseInt(row.totalVisit))
        
        doctorDetails.push({
          code: row.dx_doctor,
          name: doctorName,
          visits: parseInt(row.totalVisit)
        })
      })

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const totalAllVisits = visitCounts.reduce((sum, val) => sum + val, 0)

      // ‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      const maxVisitIndex = visitCounts.indexOf(Math.max(...visitCounts))
      const minVisitIndex = visitCounts.indexOf(Math.min(...visitCounts))

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö OPD
      res.json({
        success: true,
        data: {
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chart
          labels: labels,
          visitCounts: visitCounts,
          
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sidebar
          summary: {
            totalAllVisits: totalAllVisits,
            totalDoctors: results.length,
            maxDoctor: {
              name: labels[maxVisitIndex],
              visits: visitCounts[maxVisitIndex]
            },
            minDoctor: {
              name: labels[minVisitIndex],
              visits: visitCounts[minVisitIndex]
            }
          },
          
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          doctorDetails: doctorDetails
        }
      })
    })

  } catch (error) {
    console.error('IPD Doctors error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    })
  }
})

// üî• ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoints ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
// ‡πÄ‡∏ä‡πà‡∏ô /api/doctor-chart/opd-doctors, /api/doctor-chart/specialties

module.exports = router