// src/services/authService.js
export const authService = {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  isAuthenticated() {
    return localStorage.getItem('isLoggedIn') === 'true'
  },

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
  getUser() {
    const userData = localStorage.getItem('user')
    return userData ? JSON.parse(userData) : null
  },

  // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à + ‡πÄ‡∏£‡∏¥‡πà‡∏° session timeout + ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ login
  async saveUserData(userData) {
    localStorage.setItem('user', JSON.stringify(userData))
    localStorage.setItem('isLoggedIn', 'true')
    
    // üî• ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    localStorage.setItem('lastLoginTime', new Date().toISOString())
    
    console.log('‚úÖ User data saved:', userData)
    console.log('üïê Login time recorded:', new Date().toLocaleString('th-TH'))
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session timeout
    try {
      const { sessionTimeoutService } = await import('./sessionTimeoutService.js')
      sessionTimeoutService.start()
      console.log('üïê Session timeout started for user:', userData.name)
    } catch (error) {
      console.error('Error starting session timeout:', error)
    }
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  canAccessReport(reportType) {
    const user = this.getUser()
    if (!user) {
      console.log('‚ùå No user logged in')
      return false
    }

    // ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (user.groupname === '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö') {
      console.log('Admin access granted')
      return true
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° group
    const accessMap = {
      'PCU': ['‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PCU'],
      'ER': ['‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ER'],
      '‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î': ['‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û'],
      '‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ': ['‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô']
    }

    const allowedReports = accessMap[user.groupname] || []
    const hasAccess = allowedReports.includes(reportType)
    
    console.log(`üîç Access check: ${user.groupname} ‚Üí ${reportType} = ${hasAccess}`)
    return hasAccess
  },

  // üî• ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö + ‡∏´‡∏¢‡∏∏‡∏î session timeout + ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ login
  async logout() {
    console.log('üö™ Starting logout process...')
    
    // ‡∏´‡∏¢‡∏∏‡∏î session timeout ‡∏Å‡πà‡∏≠‡∏ô
    try {
      const { sessionTimeoutService } = await import('./sessionTimeoutService.js')
      sessionTimeoutService.stop()
      console.log('‚èπÔ∏è Session timeout stopped')
    } catch (error) {
      console.error('Error stopping session timeout:', error)
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
    localStorage.removeItem('user')
    localStorage.removeItem('isLoggedIn')
    localStorage.removeItem('userAvatar')
    localStorage.removeItem('lastLoginTime') // üî• ‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ login ‡∏î‡πâ‡∏ß‡∏¢
    
    console.log('üö™ User logged out successfully')
  },

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° session timeout ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page reload)
  async initializeSession() {
    if (this.isAuthenticated()) {
      const user = this.getUser()
      console.log('üîÑ Initializing session for existing user:', user?.name)
      
      try {
        const { sessionTimeoutService } = await import('./sessionTimeoutService.js')
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ session ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ last activity ‡πÉ‡∏ô localStorage)
        const lastActivity = localStorage.getItem('session_last_activity')
        if (lastActivity) {
          const timePassed = Date.now() - parseInt(lastActivity)
          const timeoutDuration = 30 * 60 * 1000 // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
          
          if (timePassed >= timeoutDuration) {
            console.log('‚è∞ Session expired during page reload - forcing logout')
            await this.logout()
            return false
          }
        }
        
        // Session ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÄ‡∏£‡∏¥‡πà‡∏° timeout service
        sessionTimeoutService.start()
        console.log('üïê Session timeout resumed for existing session')
        return true
      } catch (error) {
        console.error('Error initializing session:', error)
        return false
      }
    }
    return false
  },

  // ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ session manually (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô components)
  async extendSession() {
    if (this.isAuthenticated()) {
      try {
        const { sessionTimeoutService } = await import('./sessionTimeoutService.js')
        sessionTimeoutService.extend()
        console.log('üîÑ Session extended manually')
        return true
      } catch (error) {
        console.error('Error extending session:', error)
        return false
      }
    }
    return false
  },

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session timeout
  async getSessionStatus() {
    if (!this.isAuthenticated()) return null
    
    try {
      const { sessionTimeoutService } = await import('./services/sessionTimeoutService.js')
      return sessionTimeoutService.getStatus()
    } catch (error) {
      console.error('Error getting session status:', error)
      return null
    }
  },

  // üî• ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  getLastLoginTime() {
    const lastLoginTime = localStorage.getItem('lastLoginTime')
    return lastLoginTime ? new Date(lastLoginTime) : null
  },

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Header
  getDisplayName() {
    const user = this.getUser()
    return user ? user.name : 'Guest'
  },

  // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Header
  getPosition() {
    const user = this.getUser()
    return user ? user.entryposition : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
  },

  // ‡∏î‡∏∂‡∏á group name
  getUserGroup() {
    const user = this.getUser()
    return user ? user.groupname : ''
  },

  // ‡∏î‡∏∂‡∏á username
  getUsername() {
    const user = this.getUser()
    return user ? user.loginname : ''
  },

  // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å API
  async getUserAvatar() {
    try {
      const user = this.getUser()
      if (!user) return null

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô localStorage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const cachedAvatar = localStorage.getItem('userAvatar')
      if (cachedAvatar) {
        return cachedAvatar
      }

      console.log('üì∏ Fetching avatar from API for username:', user.loginname)
      // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å API
      const response = await fetch(`http://localhost:5000/api/auth/avatar/${user.loginname}`)
      console.log('üì∏ API Response status:', response.status)
      const data = await response.json()
      console.log('üì∏ API Response data:', data)

      if (data.success && data.hasImage) {
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        localStorage.setItem('userAvatar', data.image)
        return data.image
      }

      console.log('üì∏ No image found in API response')
      return null // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
    } catch (error) {
      console.error('Error fetching avatar:', error)
      return null
    }
  },

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°
  async getUserProfile() {
    try {
      const user = this.getUser()
      if (!user) return null

      const response = await fetch('http://localhost:5000/api/auth/profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          loginname: user.loginname
        })
      })

      const data = await response.json()

      if (data.success) {
        return data.profile
      }

      return null
    } catch (error) {
      console.error('Error fetching profile:', error)
      return null
    }
  },

  // ‡∏•‡∏ö cache ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä)
  clearAvatarCache() {
    localStorage.removeItem('userAvatar')
  },

  // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ default
  getDefaultAvatar() {
    return 'assets/images/avatars/avatar-d.png'
  }
}